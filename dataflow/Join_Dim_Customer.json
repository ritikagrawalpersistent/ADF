{
	"name": "Join_Dim_Customer",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Customer",
						"type": "DatasetReference"
					},
					"name": "LTCustomer"
				},
				{
					"dataset": {
						"referenceName": "LTCustomerAddress",
						"type": "DatasetReference"
					},
					"name": "LTCustomerAddress"
				},
				{
					"dataset": {
						"referenceName": "LTAddress",
						"type": "DatasetReference"
					},
					"name": "LTAddress"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CDW_Dim_Customer",
						"type": "DatasetReference"
					},
					"name": "DimCustomer"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          NameStyle as boolean,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          PasswordHash as string,",
				"          PasswordSalt as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp,",
				"          AddressID as integer,",
				"          AddressType as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          CountryRegion as string,",
				"          PostalCode as string,",
				"          StateProvince as string,",
				"          DW_InsertDate as timestamp,",
				"          DW_UpdateDate as timestamp,",
				"          Row_WID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> LTCustomer",
				"source(output(",
				"          CustomerID as integer,",
				"          AddressID as integer,",
				"          AddressType as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> LTCustomerAddress",
				"source(output(",
				"          AddressID as integer,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          StateProvince as string,",
				"          CountryRegion as string,",
				"          PostalCode as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> LTAddress",
				"LTCustomer, join2 join(LTCustomer@CustomerID == LTCustomerAddress@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"LTCustomerAddress, LTAddress join(LTCustomerAddress@AddressID == LTAddress@AddressID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join1 derive(DW_InsertDate = currentTimestamp(),",
				"          DW_UpdateDate = currentTimestamp(),",
				"          ROW_WID = nextSequence()) ~> derivedColumn1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DimCustomer"
			]
		}
	}
}